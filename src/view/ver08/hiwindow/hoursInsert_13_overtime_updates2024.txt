hiWindow.document.writeln("<!DOCTYPE html>");
hiWindow.document.writeln("<html lang=\"en\">");
hiWindow.document.writeln("<head>");
hiWindow.document.writeln("    <meta charset=\"UTF-8\">");
hiWindow.document.writeln("    <title>Insert Hours</title>");
hiWindow.document.writeln("    <style>");
hiWindow.document.writeln("        body {");
hiWindow.document.writeln("            background: linear-gradient(0.25turn, #e5e5e5, #b6b6b6, #e5e5e5);");
hiWindow.document.writeln("            overflow: hidden;");
hiWindow.document.writeln("            width: 710px;");
hiWindow.document.writeln("            height: 210px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        label {");
hiWindow.document.writeln("            color: #939393;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input {");
hiWindow.document.writeln("            background: #e8ffe5;");
hiWindow.document.writeln("            box-shadow: 3px 3px #b4b4b4 inset;");
hiWindow.document.writeln("            font-size: 16px;");
hiWindow.document.writeln("            border-radius: 15px;");
hiWindow.document.writeln("            border-width: 0px;");
hiWindow.document.writeln("            padding: 5px;");
hiWindow.document.writeln("            padding-left: 20px;");
hiWindow.document.writeln("            margin: 5px;");
hiWindow.document.writeln("            width: 600px;");
hiWindow.document.writeln("            height: 32px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#hoursAmount {");
hiWindow.document.writeln("            width: 50px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#hoursOvertime {");
hiWindow.document.writeln("            width: 20px;");
hiWindow.document.writeln("            padding-left: 5px;");
hiWindow.document.writeln("            padding-right: 0px;");
hiWindow.document.writeln("            text-align: center;");
hiWindow.document.writeln("            background: #c9dcc7;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#hoursOvertimeWeekends {");
hiWindow.document.writeln("            width: 12px;");
hiWindow.document.writeln("            box-shadow: 0px 0px;");
hiWindow.document.writeln("            padding: 0px;");
hiWindow.document.writeln("            padding-left: 0px;");
hiWindow.document.writeln("            padding-right: 0px;");
hiWindow.document.writeln("            margin: 0px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        select {");
hiWindow.document.writeln("            background: #e8ffe5;");
hiWindow.document.writeln("            box-shadow: 3px 3px #b4b4b4 inset;");
hiWindow.document.writeln("            font-size: 16px;");
hiWindow.document.writeln("            border-radius: 15px;");
hiWindow.document.writeln("            border-width: 0px;");
hiWindow.document.writeln("            padding: 5px;");
hiWindow.document.writeln("            padding-left: 20px;");
hiWindow.document.writeln("            margin: 5px;");
hiWindow.document.writeln("            width: 625px;");
hiWindow.document.writeln("            height: 40px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#insertButton {");
hiWindow.document.writeln("            background: #9cff62;");
hiWindow.document.writeln("            box-shadow: 3px 3px 0 #000000;");
hiWindow.document.writeln("            width: 100px;");
hiWindow.document.writeln("            height: 40px;");
hiWindow.document.writeln("            border-width: 3px;");
hiWindow.document.writeln("            padding-left: 0px;");
hiWindow.document.writeln("            margin-left: 10px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#removeButton {");
hiWindow.document.writeln("            background: #ff6262;");
hiWindow.document.writeln("            box-shadow: 3px 3px 0 #000000;");
hiWindow.document.writeln("            transition: all .15s linear 0s;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("            display: inline-block;");
hiWindow.document.writeln("            width: 100px;");
hiWindow.document.writeln("            height: 40px;");
hiWindow.document.writeln("            border-width: 3px;");
hiWindow.document.writeln("            padding-left: 0px;");
hiWindow.document.writeln("            margin-left: 10px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#insertButton:active {");
hiWindow.document.writeln("            background: #63a83b;");
hiWindow.document.writeln("            box-shadow: 0px 0px 0 #000000;");
hiWindow.document.writeln("            transition: all .05s linear 0s;");
hiWindow.document.writeln("            top: 3px;");
hiWindow.document.writeln("            left: 3px;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#insertButton:hover {");
hiWindow.document.writeln("            border-color: #0014ff;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#removeButton:active {");
hiWindow.document.writeln("            background: #ad3f3f;");
hiWindow.document.writeln("            box-shadow: 0px 0px 0 #000000;");
hiWindow.document.writeln("            transition: all .05s linear 0s;");
hiWindow.document.writeln("            top: 3px;");
hiWindow.document.writeln("            left: 3px;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#removeButton:hover {");
hiWindow.document.writeln("            border-color: #0014ff;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#removeButton:active {");
hiWindow.document.writeln("            background: #ad3f3f;");
hiWindow.document.writeln("            box-shadow: 0px 0px 0 #000000;");
hiWindow.document.writeln("            transition: all .05s linear 0s;");
hiWindow.document.writeln("            top: 3px;");
hiWindow.document.writeln("            left: 3px;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#removeButton:hover {");
hiWindow.document.writeln("            border-color: #0014ff;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#convertJiraReportDetailsButton {");
hiWindow.document.writeln("            font-size: 10px;");
hiWindow.document.writeln("            font-weight: bold;");
hiWindow.document.writeln("            background: #07e3da;");
hiWindow.document.writeln("            box-shadow: 3px 3px 0 #000000;");
hiWindow.document.writeln("            transition: all .15s linear 0s;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("            display: inline-block;");
hiWindow.document.writeln("            width: 35px;");
hiWindow.document.writeln("            height: 40px;");
hiWindow.document.writeln("            border-width: 3px;");
hiWindow.document.writeln("            padding-left: 0px;");
hiWindow.document.writeln("            margin-left: 10px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#convertJiraReportDetailsButton:active {");
hiWindow.document.writeln("            background: #0d9492;");
hiWindow.document.writeln("            box-shadow: 0px 0px 0 #000000;");
hiWindow.document.writeln("            transition: all .05s linear 0s;");
hiWindow.document.writeln("            top: 3px;");
hiWindow.document.writeln("            left: 3px;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#convertJiraReportDetailsButton:hover {");
hiWindow.document.writeln("            border-color: #0014ff;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#convertJiraReportButton {");
hiWindow.document.writeln("            font-size: 10px;");
hiWindow.document.writeln("            font-weight: bold;");
hiWindow.document.writeln("            background: #07e3da;");
hiWindow.document.writeln("            box-shadow: 3px 3px 0 #000000;");
hiWindow.document.writeln("            transition: all .15s linear 0s;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("            display: inline-block;");
hiWindow.document.writeln("            width: 35px;");
hiWindow.document.writeln("            height: 40px;");
hiWindow.document.writeln("            border-width: 3px;");
hiWindow.document.writeln("            padding-left: 0px;");
hiWindow.document.writeln("            margin-left: 10px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#convertJiraReportButton:active {");
hiWindow.document.writeln("            background: #0d9492;");
hiWindow.document.writeln("            box-shadow: 0px 0px 0 #000000;");
hiWindow.document.writeln("            transition: all .05s linear 0s;");
hiWindow.document.writeln("            top: 3px;");
hiWindow.document.writeln("            left: 3px;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#convertJiraReportButton:hover {");
hiWindow.document.writeln("            border-color: #0014ff;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#writeToTxtButton {");
hiWindow.document.writeln("            font-size: 10px;");
hiWindow.document.writeln("            font-weight: bold;");
hiWindow.document.writeln("            background: #ffe786;");
hiWindow.document.writeln("            box-shadow: 3px 3px 0 #000000;");
hiWindow.document.writeln("            transition: all .15s linear 0s;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("            display: inline-block;");
hiWindow.document.writeln("            width: 55px;");
hiWindow.document.writeln("            height: 40px;");
hiWindow.document.writeln("            border-width: 3px;");
hiWindow.document.writeln("            padding-left: 0px;");
hiWindow.document.writeln("            margin-left: 10px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#writeToTxtButton:active {");
hiWindow.document.writeln("            background: #bdaa64;");
hiWindow.document.writeln("            box-shadow: 0px 0px 0 #000000;");
hiWindow.document.writeln("            transition: all .05s linear 0s;");
hiWindow.document.writeln("            top: 3px;");
hiWindow.document.writeln("            left: 3px;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#writeToTxtButton:hover {");
hiWindow.document.writeln("            border-color: #0014ff;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#readTxtButton {");
hiWindow.document.writeln("            font-size: 10px;");
hiWindow.document.writeln("            font-weight: bold;");
hiWindow.document.writeln("            background: #c987ff;");
hiWindow.document.writeln("            box-shadow: 3px 3px 0 #000000;");
hiWindow.document.writeln("            transition: all .15s linear 0s;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("            display: inline-block;");
hiWindow.document.writeln("            width: 55px;");
hiWindow.document.writeln("            height: 40px;");
hiWindow.document.writeln("            border-width: 3px;");
hiWindow.document.writeln("            padding-left: 0px;");
hiWindow.document.writeln("            margin-left: 10px;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#readTxtButton:active {");
hiWindow.document.writeln("            background: #9460bd;");
hiWindow.document.writeln("            box-shadow: 0px 0px 0 #000000;");
hiWindow.document.writeln("            transition: all .05s linear 0s;");
hiWindow.document.writeln("            top: 3px;");
hiWindow.document.writeln("            left: 3px;");
hiWindow.document.writeln("            position: relative;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        input#readTxtButton:hover {");
hiWindow.document.writeln("            border-color: #0014ff;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        div#statusMessage {");
hiWindow.document.writeln("            font-size: 16px;");
hiWindow.document.writeln("            color: #939393;");
hiWindow.document.writeln("            margin-top: 10px;");
hiWindow.document.writeln("            font-weight: normal;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln("    </style>");
hiWindow.document.writeln("</head>");
hiWindow.document.writeln("<body>");
hiWindow.document.writeln("<form>");
hiWindow.document.writeln("    <table>");
hiWindow.document.writeln("        <tr>");
hiWindow.document.writeln("            <td>");
hiWindow.document.writeln("                <label for=\"filterTasks\">Filter: </label>");
hiWindow.document.writeln("            </td>");
hiWindow.document.writeln("            <td>");
hiWindow.document.writeln("                <input type=\"text\" id=\"filterTasks\" value=\"\" onkeyup=\"findTasksFilterAndSetToMenu()\"");
hiWindow.document.writeln("                       onmouseover=\"filterTasksInfo()\">");
hiWindow.document.writeln("            </td>");
hiWindow.document.writeln("        </tr>");
hiWindow.document.writeln("        <tr>");
hiWindow.document.writeln("            <td>");
hiWindow.document.writeln("                <label for=\"foundTasks\">Task: </label>");
hiWindow.document.writeln("            </td>");
hiWindow.document.writeln("            <td>");
hiWindow.document.writeln("                <select id=\"foundTasks\" onmouseover=\"foundTasksInfo()\">");
hiWindow.document.writeln("                </select>");
hiWindow.document.writeln("            </td>");
hiWindow.document.writeln("        </tr>");
hiWindow.document.writeln("        <tr>");
hiWindow.document.writeln("            <td>");
hiWindow.document.writeln("                <label for=\"hoursAmount\">Hours:</label>");
hiWindow.document.writeln("            </td>");
hiWindow.document.writeln("            <td>");
hiWindow.document.writeln("                <input type=\"text\" id=\"hoursAmount\" value=\"40\" size=\"100px\" onmouseover=\"hoursAmountInfo()\">");
hiWindow.document.writeln("                <input type=\"text\" id=\"hoursOvertime\" value=\"0\" size=\"100px\" onmouseover=\"hoursOvertimeInfo()\">");
hiWindow.document.writeln("                <input type=\"checkbox\" id=\"hoursOvertimeWeekends\" onmouseover=\"hoursOvertimeWeekendsInfo()\">");
hiWindow.document.writeln("                <input type=\"button\" id=\"insertButton\" value=\"INSERT\" onclick=\"insertHours()\"");
hiWindow.document.writeln("                       onmouseover=\"insertButtonInfo()\">");
hiWindow.document.writeln("                <input type=\"button\" id=\"removeButton\" value=\"REMOVE\" onclick=\"removeHours()\"");
hiWindow.document.writeln("                       onmouseover=\"removeButtonInfo()\">");
hiWindow.document.writeln("                <input type=\"button\" id=\"convertJiraReportDetailsButton\" value=\"xls 2\"");
hiWindow.document.writeln("                       onclick=\"convertJiraReportDetailed()\"");
hiWindow.document.writeln("                       onmouseover=\"convertJiraReportInfoDetailed()\">");
hiWindow.document.writeln("                <input type=\"button\" id=\"convertJiraReportButton\" value=\"xls\" onclick=\"convertJiraReport()\"");
hiWindow.document.writeln("                       onmouseover=\"convertJiraReportInfo()\">");
hiWindow.document.writeln("                <input type=\"button\" id=\"writeToTxtButton\" value=\"writeTXT\" onclick=\"writeToTxtFile()\"");
hiWindow.document.writeln("                       onmouseover=\"writeToTxtButtonInfo()\">");
hiWindow.document.writeln("                <input type=\"button\" id=\"readTxtButton\" value=\"parseTXT\" onclick=\"readTxtFile()\"");
hiWindow.document.writeln("                       onmouseover=\"readTxtButtonInfo()\">");
hiWindow.document.writeln("            </td>");
hiWindow.document.writeln("        </tr>");
hiWindow.document.writeln("        <tr>");
hiWindow.document.writeln("            <td></td>");
hiWindow.document.writeln("            <td>");
hiWindow.document.writeln("                <div id=\"statusMessage\">Waiting for pressing some button...</div>");
hiWindow.document.writeln("            </td>");
hiWindow.document.writeln("        </tr>");
hiWindow.document.writeln("    </table>");
hiWindow.document.writeln("</form>");
hiWindow.document.writeln("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js\"></script>");
hiWindow.document.writeln("<script>");
hiWindow.document.writeln("    let foundFiltered = [];");
hiWindow.document.writeln("    let foundId = new Map();");
hiWindow.document.writeln("    let sumHoursForTask = [];");
hiWindow.document.writeln("    let taskSumHours = new Map();");
hiWindow.document.writeln("    let task = \"\";");
hiWindow.document.writeln("    let hours = \"\";");
hiWindow.document.writeln("    let hoursOvertime = \"\";");
hiWindow.document.writeln("    const status = document.querySelector('#statusMessage');");
hiWindow.document.writeln("    document.querySelectorAll('input[id=filterTasks]')[0].onkeyup();");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function filterTasksInfo() {");
hiWindow.document.writeln("        status.textContent = \"Filter ? just start writing, tasks will be filtered.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function hoursAmountInfo() {");
hiWindow.document.writeln("        status.textContent = \"Hours ? write here amount of h for selected task. Both , and . are supported.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function hoursOvertimeInfo() {");
hiWindow.document.writeln("        status.textContent = \"Overtime ? allowable overtime hours per day. Use 0 for no overtime.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function hoursOvertimeWeekendsInfo() {");
hiWindow.document.writeln("        status.textContent = \"Overtime on weekends ? allowable overtime on weekends first.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function foundTasksInfo() {");
hiWindow.document.writeln("        status.textContent = \"Task ? select filtered one.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function insertButtonInfo() {");
hiWindow.document.writeln("        status.textContent = \"INSERT ? try to add given hours into selected task, if it is possible, starting from 1st day.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function removeButtonInfo() {");
hiWindow.document.writeln("        status.textContent = \"REMOVE ? try to subtract given hours from selected task, if it is possible, starting from last day.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function convertJiraReportInfoDetailed() {");
hiWindow.document.writeln("        status.textContent = \"xls 2 ? read xls report from Jira (Group By PPM Project 20xx, Issue) and convert to input txt file.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function convertJiraReportInfo() {");
hiWindow.document.writeln("        status.textContent = \"xls ? read xls report from Jira (Group By PPM Project 20xx) and convert to input txt file.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function writeToTxtButtonInfo() {");
hiWindow.document.writeln("        status.textContent = \"writeTXT ? write all filtered tasks to a txt file, including total hours.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function readTxtButtonInfo() {");
hiWindow.document.writeln("        status.textContent = \"parseTXT ? read txt file and try to add/remove hours for each task.\";");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function findTasksFilterAndSetToMenu() {");
hiWindow.document.writeln("        //console.log(\"filter\");");
hiWindow.document.writeln("        //clear task list");
hiWindow.document.writeln("        const foundTasks = document.querySelector('#foundTasks');");
hiWindow.document.writeln("        while (foundTasks.firstChild) {");
hiWindow.document.writeln("            foundTasks.removeChild(foundTasks.lastChild);");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        //find tasks");
hiWindow.document.writeln("        let found = [];");
hiWindow.document.writeln("        sumHoursForTask = [];");
hiWindow.document.writeln("        taskSumHours = new Map();");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        var taskTable = window.opener.document.querySelector('#table3'); //put here window.opener.  <<<<<<");
hiWindow.document.writeln("        var tasksRows = taskTable.children[1];");
hiWindow.document.writeln("        let iFound = -1;");
hiWindow.document.writeln("        for (let i = 1; i < tasksRows.children.length; i++) {");
hiWindow.document.writeln("            let taskCell = tasksRows.children[i];");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("            let taskName = taskCell.children[1].textContent.replaceAll(\"\\n\", \"\").replaceAll(\"\\t\", \"\");");
hiWindow.document.writeln("            if (taskName.includes(\"Project:\")");
hiWindow.document.writeln("                || taskName.includes(\"Misc -\")");
hiWindow.document.writeln("                || (taskName.includes(\"Asset\") && taskName.length <= 6)) {");
hiWindow.document.writeln("                continue;");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("            iFound = iFound + 1;");
hiWindow.document.writeln("            if (found.includes(taskName)) {");
hiWindow.document.writeln("                taskName = taskName + \"_duplicated\";");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("            found.push(taskName);");
hiWindow.document.writeln("            // found.push(i + \")\" + taskCell.children[1].textContent.replaceAll(\"\\n\",\"\"));");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("            foundId.set(found[iFound], i);");
hiWindow.document.writeln("            //console.log(found[iFound] + \"id = \" + i);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("            // finding sum hours --------------");
hiWindow.document.writeln("            var sumHoursTable = window.opener.document.querySelector('#table5');  //put here window.opener.  <<<<<<");
hiWindow.document.writeln("            var sumHoursTableTBody = sumHoursTable.children[1];");
hiWindow.document.writeln("            var sumHoursTableTBodyTR = sumHoursTableTBody.children[i];");
hiWindow.document.writeln("            var sumHoursTableTBodyTD = sumHoursTableTBodyTR.children[0];");
hiWindow.document.writeln("            var sumHoursTableTBodyTDsubtable = sumHoursTableTBodyTD.children[0];");
hiWindow.document.writeln("            var sumHours = sumHoursTableTBodyTDsubtable.children[0].children[0].children[1].children[0].textContent;");
hiWindow.document.writeln("            //console.log(\"sumHours=\" + sumHours);");
hiWindow.document.writeln("            sumHoursForTask.push(sumHours);");
hiWindow.document.writeln("            taskSumHours.set(taskName, sumHours);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("            //console.log(sumHoursForTask);");
hiWindow.document.writeln("            // finding sum hours");
hiWindow.document.writeln("        }");
hiWindow.document.writeln("        //console.log(foundId);");
hiWindow.document.writeln("        //console.log(foundId.get(found[4]));");
hiWindow.document.writeln("        //find tasks");
hiWindow.document.writeln(" ");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        //filter");
hiWindow.document.writeln("        let filter = document.querySelector('#filterTasks').value;");
hiWindow.document.writeln("        filter = filter.toLowerCase();");
hiWindow.document.writeln("        let words = filter.split(\" \");");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        foundFiltered = [];");
hiWindow.document.writeln("        found.forEach(task => {");
hiWindow.document.writeln("            let taskLowerCase = task.toLowerCase();");
hiWindow.document.writeln("            let taskShallBeAdded = true;");
hiWindow.document.writeln("            words.forEach(word => {");
hiWindow.document.writeln("                if (taskLowerCase.search(word) === -1 && word !== \"\") {");
hiWindow.document.writeln("                    taskShallBeAdded = false;");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("            });");
hiWindow.document.writeln("            if (taskShallBeAdded) {");
hiWindow.document.writeln("                foundFiltered.push(task);");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("        });");
hiWindow.document.writeln(" ");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        let i = 0;");
hiWindow.document.writeln("        foundFiltered.forEach(found => {");
hiWindow.document.writeln("            let newOption = new Option(found);");
hiWindow.document.writeln("            i++;");
hiWindow.document.writeln("            let id = \"foundTask-\" + i;");
hiWindow.document.writeln("            newOption.setAttribute('value', found);");
hiWindow.document.writeln("            newOption.setAttribute('id', id);");
hiWindow.document.writeln("            foundTasks.add(newOption);");
hiWindow.document.writeln("        })");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function insertHours() {");
hiWindow.document.writeln("        task = document.querySelector('#foundTasks').value;");
hiWindow.document.writeln("        // hours = parseFloat(document.querySelector('#hoursAmount').value);");
hiWindow.document.writeln("        if (parseFloat(\"0,1\") === 0) {");
hiWindow.document.writeln("            hours = parseFloat(document.querySelector('#hoursAmount').value.replaceAll(\",\", \".\"));");
hiWindow.document.writeln("        } else {");
hiWindow.document.writeln("            hours = parseFloat(document.querySelector('#hoursAmount').value.replaceAll(\".\", \",\"));");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        let taskId = foundId.get(task);");
hiWindow.document.writeln("        status.textContent = hours + \" hours were inserted to \" + task;");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        //insert hours");
hiWindow.document.writeln("        // ! be careful with these");
hiWindow.document.writeln("        let bgColorDefaultExpected = \"white\";");
hiWindow.document.writeln("        let bgColorPartialHoursExpected = \"rgb(205, 226, 183)\";");
hiWindow.document.writeln("        let bgColorPartialHoursWarning = \"rgb(255, 255, 124)\";");
hiWindow.document.writeln("        var bgColorCorrect = \"rgb(152, 191, 105)\";");
hiWindow.document.writeln("        var bgColorWarning = \"rgb(249, 249, 102)\";");
hiWindow.document.writeln("        var bgColorSaturdayRGB = \"rgb(255, 153, 153)\";");
hiWindow.document.writeln("        var bgColorSundayRGB = \"rgb(255, 102, 102)\";");
hiWindow.document.writeln("        let maxHoursDaily = parseFloat(\"8\");");
hiWindow.document.writeln("        // ! be careful with these");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        let shallInsertHours = false;");
hiWindow.document.writeln("        let totalDayHours = parseFloat(\"0\");");
hiWindow.document.writeln("        var totalDayHoursTable = window.opener.document.querySelector('#table7');  //put here window.opener.  <<<<<<");
hiWindow.document.writeln("        var dayHoursTable = window.opener.document.querySelector('#table4');  //put here window.opener.  <<<<<<");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        var totalDayHoursRows = totalDayHoursTable.children[1];");
hiWindow.document.writeln("        var totalDayHoursCells = totalDayHoursRows.children[1];");
hiWindow.document.writeln("        for (let i = 0; i < totalDayHoursCells.children.length; i++) {");
hiWindow.document.writeln("            let dayHoursComponent = totalDayHoursCells.children[i];");
hiWindow.document.writeln("            let dayHoursBackgroundColor = dayHoursComponent.style.getPropertyValue(\"background-color\");");
hiWindow.document.writeln("            shallInsertHours = (dayHoursBackgroundColor === bgColorPartialHoursExpected");
hiWindow.document.writeln("                || dayHoursBackgroundColor === bgColorDefaultExpected || dayHoursBackgroundColor === bgColorPartialHoursWarning);");
hiWindow.document.writeln("            if (shallInsertHours) {");
hiWindow.document.writeln("                let totalDayHoursText = dayHoursComponent.textContent;");
hiWindow.document.writeln("                totalDayHours = parseFloat(totalDayHoursText.trim().replaceAll(\",\", \".\"));");
hiWindow.document.writeln("                //console.log(\"Day \" + i + \" -> \" + totalDayHours);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                if (totalDayHours < maxHoursDaily && hours > parseFloat(0)) {");
hiWindow.document.writeln("                    let freeHours = maxHoursDaily - totalDayHours;");
hiWindow.document.writeln("                    let hoursToInsert = freeHours <= hours ? freeHours : hours;");
hiWindow.document.writeln("                    //console.log(\"YES, insert hours here: \" + hoursToInsert + \" from \" + hours + \"| i = \" + i + \",taskId=\" + taskId);");
hiWindow.document.writeln("                    hours = hours - hoursToInsert;");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    //var dayHoursTable = document.querySelector('#table4');");
hiWindow.document.writeln("                    let dayHoursTBody = dayHoursTable.children[1];");
hiWindow.document.writeln("                    let dayHoursRow = dayHoursTBody.children[taskId];  //taskId=3");
hiWindow.document.writeln("                    let dayHoursCell = dayHoursRow.children[i]; //i=0");
hiWindow.document.writeln("                    let dayHoursInput = dayHoursCell.children[0];");
hiWindow.document.writeln("                    let currentHours;");
hiWindow.document.writeln("                    if (dayHoursInput.value === '' || dayHoursInput.value === null) {");
hiWindow.document.writeln("                        currentHours = parseFloat('0');");
hiWindow.document.writeln("                    } else {");
hiWindow.document.writeln("                        if (parseFloat(\"0,1\") === 0) {");
hiWindow.document.writeln("                            currentHours = parseFloat(dayHoursInput.value.replaceAll(\",\", \".\"));");
hiWindow.document.writeln("                        } else {");
hiWindow.document.writeln("                            currentHours = parseFloat(dayHoursInput.value.replaceAll(\".\", \",\"));");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        // currentHours = parseFloat(dayHoursInput.value);");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    dayHoursInput.value = currentHours + hoursToInsert;");
hiWindow.document.writeln("                    if (totalDayHoursText.trim().indexOf(\".\") === -1) {");
hiWindow.document.writeln("                        dayHoursInput.value = dayHoursInput.value.replaceAll(\".\", \",\");");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    dayHoursInput.onchange();");
hiWindow.document.writeln("                    // validateAllFields();");
hiWindow.document.writeln("                    window.opener.document.querySelectorAll('input[id=validateAllFieldsButton]')[0].click();");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("        }");
hiWindow.document.writeln("        if (hours <= 0) {");
hiWindow.document.writeln("            return;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln("        // insert overtime into weekends starting from beginning");
hiWindow.document.writeln("        let shallAddOvertimeOnWeekends = document.querySelector('#hoursOvertimeWeekends').checked;");
hiWindow.document.writeln("        if (shallAddOvertimeOnWeekends) {");
hiWindow.document.writeln("            //FIXME - make it dry");
hiWindow.document.writeln("            totalDayHoursRows = totalDayHoursTable.children[1];");
hiWindow.document.writeln("            totalDayHoursCells = totalDayHoursRows.children[1];");
hiWindow.document.writeln("            for (let i = 0; i < totalDayHoursCells.children.length; i++) {");
hiWindow.document.writeln("                let dayHoursComponent = totalDayHoursCells.children[i];");
hiWindow.document.writeln("                let dayHoursBackgroundColor = dayHoursComponent.style.getPropertyValue(\"background-color\");");
hiWindow.document.writeln("                shallInsertHours = (dayHoursBackgroundColor === bgColorSaturdayRGB");
hiWindow.document.writeln("                    || dayHoursBackgroundColor === bgColorSundayRGB);");
hiWindow.document.writeln("                if (shallInsertHours) {");
hiWindow.document.writeln("                    let totalDayHoursText = dayHoursComponent.textContent;");
hiWindow.document.writeln("                    totalDayHours = parseFloat(totalDayHoursText.trim().replaceAll(\",\", \".\"));");
hiWindow.document.writeln("                    //console.log(\"Day \" + i + \" -> \" + totalDayHours);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    if (totalDayHours < maxHoursDaily && hours > parseFloat(0)) {");
hiWindow.document.writeln("                        let freeHours = maxHoursDaily - totalDayHours;");
hiWindow.document.writeln("                        let hoursToInsert = freeHours <= hours ? freeHours : hours;");
hiWindow.document.writeln("                        //console.log(\"YES, insert hours here: \" + hoursToInsert + \" from \" + hours + \"| i = \" + i + \",taskId=\" + taskId);");
hiWindow.document.writeln("                        hours = hours - hoursToInsert;");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                        //var dayHoursTable = document.querySelector('#table4');");
hiWindow.document.writeln("                        let dayHoursTBody = dayHoursTable.children[1];");
hiWindow.document.writeln("                        let dayHoursRow = dayHoursTBody.children[taskId];  //taskId=3");
hiWindow.document.writeln("                        let dayHoursCell = dayHoursRow.children[i]; //i=0");
hiWindow.document.writeln("                        let dayHoursInput = dayHoursCell.children[0];");
hiWindow.document.writeln("                        let currentHours;");
hiWindow.document.writeln("                        if (dayHoursInput.value === '' || dayHoursInput.value === null) {");
hiWindow.document.writeln("                            currentHours = parseFloat('0');");
hiWindow.document.writeln("                        } else {");
hiWindow.document.writeln("                            if (parseFloat(\"0,1\") === 0) {");
hiWindow.document.writeln("                                currentHours = parseFloat(dayHoursInput.value.replaceAll(\",\", \".\"));");
hiWindow.document.writeln("                            } else {");
hiWindow.document.writeln("                                currentHours = parseFloat(dayHoursInput.value.replaceAll(\".\", \",\"));");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                            // currentHours = parseFloat(dayHoursInput.value);");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        dayHoursInput.value = currentHours + hoursToInsert;");
hiWindow.document.writeln("                        if (totalDayHoursText.trim().indexOf(\".\") === -1) {");
hiWindow.document.writeln("                            dayHoursInput.value = dayHoursInput.value.replaceAll(\".\", \",\");");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        dayHoursInput.onchange();");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("        }");
hiWindow.document.writeln("        if (parseFloat(\"0,1\") === 0) {");
hiWindow.document.writeln("            hoursOvertime = parseFloat(document.querySelector('#hoursOvertime').value.replaceAll(\",\", \".\"));");
hiWindow.document.writeln("        } else {");
hiWindow.document.writeln("            hoursOvertime = parseFloat(document.querySelector('#hoursOvertime').value.replaceAll(\".\", \",\"));");
hiWindow.document.writeln("        }");
hiWindow.document.writeln("        if (hoursOvertime <= 0) {");
hiWindow.document.writeln("            return;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln("        // insert overtime into working days starting from beginning again");
hiWindow.document.writeln("        //FIXME - make it dry");
hiWindow.document.writeln("        totalDayHoursRows = totalDayHoursTable.children[1];");
hiWindow.document.writeln("        totalDayHoursCells = totalDayHoursRows.children[1];");
hiWindow.document.writeln("        for (let i = 0; i < totalDayHoursCells.children.length; i++) {");
hiWindow.document.writeln("            let dayHoursComponent = totalDayHoursCells.children[i];");
hiWindow.document.writeln("            let dayHoursBackgroundColor = dayHoursComponent.style.getPropertyValue(\"background-color\");");
hiWindow.document.writeln("            shallInsertHours = (dayHoursBackgroundColor === bgColorPartialHoursExpected");
hiWindow.document.writeln("                || dayHoursBackgroundColor === bgColorDefaultExpected");
hiWindow.document.writeln("                || dayHoursBackgroundColor === bgColorPartialHoursWarning");
hiWindow.document.writeln("                || dayHoursBackgroundColor === bgColorCorrect");
hiWindow.document.writeln("                || dayHoursBackgroundColor === bgColorWarning);");
hiWindow.document.writeln("            if (shallAddOvertimeOnWeekends && !shallInsertHours) {");
hiWindow.document.writeln("                shallInsertHours = (dayHoursBackgroundColor === bgColorSaturdayRGB");
hiWindow.document.writeln("                    || dayHoursBackgroundColor === bgColorSundayRGB);");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("            if (shallInsertHours) {");
hiWindow.document.writeln("                let totalDayHoursText = dayHoursComponent.textContent;");
hiWindow.document.writeln("                totalDayHours = parseFloat(totalDayHoursText.trim().replaceAll(\",\", \".\"));");
hiWindow.document.writeln("                //console.log(\"Day \" + i + \" -> \" + totalDayHours);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                if (totalDayHours < maxHoursDaily + hoursOvertime && hours > parseFloat(0)) {");
hiWindow.document.writeln("                    let freeHours = maxHoursDaily + hoursOvertime - totalDayHours;");
hiWindow.document.writeln("                    let hoursToInsert = freeHours <= hours ? freeHours : hours;");
hiWindow.document.writeln("                    //console.log(\"YES, insert hours here: \" + hoursToInsert + \" from \" + hours + \"| i = \" + i + \",taskId=\" + taskId);");
hiWindow.document.writeln("                    hours = hours - hoursToInsert;");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    //var dayHoursTable = document.querySelector('#table4');");
hiWindow.document.writeln("                    let dayHoursTBody = dayHoursTable.children[1];");
hiWindow.document.writeln("                    let dayHoursRow = dayHoursTBody.children[taskId];  //taskId=3");
hiWindow.document.writeln("                    let dayHoursCell = dayHoursRow.children[i]; //i=0");
hiWindow.document.writeln("                    let dayHoursInput = dayHoursCell.children[0];");
hiWindow.document.writeln("                    let currentHours;");
hiWindow.document.writeln("                    if (dayHoursInput.value === '' || dayHoursInput.value === null) {");
hiWindow.document.writeln("                        currentHours = parseFloat('0');");
hiWindow.document.writeln("                    } else {");
hiWindow.document.writeln("                        if (parseFloat(\"0,1\") === 0) {");
hiWindow.document.writeln("                            currentHours = parseFloat(dayHoursInput.value.replaceAll(\",\", \".\"));");
hiWindow.document.writeln("                        } else {");
hiWindow.document.writeln("                            currentHours = parseFloat(dayHoursInput.value.replaceAll(\".\", \",\"));");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        // currentHours = parseFloat(dayHoursInput.value);");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    dayHoursInput.value = currentHours + hoursToInsert;");
hiWindow.document.writeln("                    if (totalDayHoursText.trim().indexOf(\".\") === -1) {");
hiWindow.document.writeln("                        dayHoursInput.value = dayHoursInput.value.replaceAll(\".\", \",\");");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    dayHoursInput.onchange();");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("        }");
hiWindow.document.writeln("        window.opener.document.querySelectorAll('input[id=validateAllFieldsButton]')[0].click();");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function removeHours() {");
hiWindow.document.writeln("        task = document.querySelector('#foundTasks').value;");
hiWindow.document.writeln("        // hours = parseFloat(document.querySelector('#hoursAmount').value);");
hiWindow.document.writeln("        if (parseFloat(\"0,1\") === 0) {");
hiWindow.document.writeln("            hours = parseFloat(document.querySelector('#hoursAmount').value.replaceAll(\",\", \".\"));");
hiWindow.document.writeln("        } else {");
hiWindow.document.writeln("            hours = parseFloat(document.querySelector('#hoursAmount').value.replaceAll(\".\", \",\"));");
hiWindow.document.writeln("        }");
hiWindow.document.writeln("        let taskId = foundId.get(task);");
hiWindow.document.writeln("        status.textContent = hours + \" hours were removed from \" + task;");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        //insert hours");
hiWindow.document.writeln("        // ! be careful with these");
hiWindow.document.writeln("        let maxHoursDaily = 8;");
hiWindow.document.writeln("        // ! be careful with these");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        let shallRemoveHours = false;");
hiWindow.document.writeln("        let totalDayHours = parseFloat('0');");
hiWindow.document.writeln("        var totalDayHoursTable = window.opener.document.querySelector('#table7');  //put here window.opener.  <<<<<<");
hiWindow.document.writeln("        var dayHoursTable = window.opener.document.querySelector('#table4');  //put here window.opener.  <<<<<<");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        var totalDayHoursRows = totalDayHoursTable.children[1];");
hiWindow.document.writeln("        var totalDayHoursCells = totalDayHoursRows.children[1];");
hiWindow.document.writeln("        for (let i = totalDayHoursCells.children.length - 1; i >= 0; i--) {");
hiWindow.document.writeln("            let dayHoursComponent = totalDayHoursCells.children[i];");
hiWindow.document.writeln("            let totalDayHoursText = dayHoursComponent.textContent;");
hiWindow.document.writeln("            totalDayHours = parseFloat(totalDayHoursText.trim().replaceAll(\",\", \".\"));");
hiWindow.document.writeln("            //console.log(\"Day \" + i + \" -> \" + totalDayHours);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("            //var dayHoursTable = document.querySelector('#table4');");
hiWindow.document.writeln("            let dayHoursTBody = dayHoursTable.children[1];");
hiWindow.document.writeln("            let dayHoursRow = dayHoursTBody.children[taskId];  //taskId=5");
hiWindow.document.writeln("            let dayHoursCell = dayHoursRow.children[i]; //i=0");
hiWindow.document.writeln("            let dayHoursInput = dayHoursCell.children[0];");
hiWindow.document.writeln("            let currentHours;");
hiWindow.document.writeln("            if (dayHoursInput.value === null || dayHoursInput.value === \"\") {");
hiWindow.document.writeln("                currentHours = parseFloat(\"0\");");
hiWindow.document.writeln("            } else {");
hiWindow.document.writeln("                if (parseFloat(\"0,1\") === 0) {");
hiWindow.document.writeln("                    currentHours = parseFloat(dayHoursInput.value.replaceAll(\",\", \".\"));");
hiWindow.document.writeln("                } else {");
hiWindow.document.writeln("                    currentHours = parseFloat(dayHoursInput.value.replaceAll(\".\", \",\"));");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("                // currentHours = parseFloat(dayHoursInput.value);");
hiWindow.document.writeln("            }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("            shallRemoveHours = currentHours > parseFloat('0') && hours !== parseFloat('0');");
hiWindow.document.writeln("            if (shallRemoveHours) {");
hiWindow.document.writeln("                let hoursToRemove = currentHours <= hours ? currentHours : hours;");
hiWindow.document.writeln("                //console.log(\"YES, remove hours here: \" + hoursToRemove + \" from \" + hours + \"| i = \" + i + \",taskId=\" + taskId);");
hiWindow.document.writeln("                hours = hours - hoursToRemove;");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                dayHoursInput.value = currentHours - hoursToRemove;");
hiWindow.document.writeln("                if (totalDayHoursText.trim().indexOf(\".\") === -1) {");
hiWindow.document.writeln("                    dayHoursInput.value = dayHoursInput.value.replaceAll(\".\", \",\");");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("                try {");
hiWindow.document.writeln("                    dayHoursInput.onchange();");
hiWindow.document.writeln("                } catch (error) {");
hiWindow.document.writeln("                    //console.log(\"Upps: some strange error :-(\");");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("                //validateAllFields();");
hiWindow.document.writeln("                window.opener.document.querySelectorAll('input[id=validateAllFieldsButton]')[0].click();");
hiWindow.document.writeln("                window.opener.document.querySelectorAll('input[id=clearZerosButton]')[0].click();");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("        }");
hiWindow.document.writeln("        ;");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function writeToTxtFile() {");
hiWindow.document.writeln("        let fondTasks = document.querySelector('#foundTasks').children");
hiWindow.document.writeln("        hours = document.querySelector('#hoursAmount').value;");
hiWindow.document.writeln("        status.textContent = \"Filtered tasks were written to a txt file.\";");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        // open file in order to write a file & what to write");
hiWindow.document.writeln("        async function writeFile() {");
hiWindow.document.writeln("            const options = {");
hiWindow.document.writeln("                // suggestedName: 'ppm_hours_',");
hiWindow.document.writeln("                types: [");
hiWindow.document.writeln("                    {");
hiWindow.document.writeln("                        description: 'Text Files',");
hiWindow.document.writeln("                        accept: {");
hiWindow.document.writeln("                            'text/plain': ['.txt'],");
hiWindow.document.writeln("                        },");
hiWindow.document.writeln("                    },");
hiWindow.document.writeln("                ],");
hiWindow.document.writeln("            };");
hiWindow.document.writeln("            const fileHandle = await window.showSaveFilePicker(options);");
hiWindow.document.writeln("            const writable = await fileHandle.createWritable();");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("            var creationDate = new Date();");
hiWindow.document.writeln("            var creationDateFormatted = +creationDate.getFullYear() + \"-\" + (creationDate.getMonth() + 1) + \"-\" + creationDate.getDate()");
hiWindow.document.writeln("                + \"_\" + creationDate.getHours() + \"-\" + creationDate.getMinutes() + \"-\" + creationDate.getSeconds();");
hiWindow.document.writeln("            await writable.write(\"# Created in \" + creationDateFormatted + \".\\n\");");
hiWindow.document.writeln("            await writable.write(\"#------------------------------------------------------------------------------------\\n\");");
hiWindow.document.writeln("            await writable.write(\"#<-- use this for comments.\\n\");");
hiWindow.document.writeln("            await writable.write(\"# Content:\\n\");");
hiWindow.document.writeln("            await writable.write(\"# List of task names, below each current total hours.\\n\");");
hiWindow.document.writeln("            await writable.write(\"# In order to increase or decrease hours, write +XXX or -XXX, for example:\\n\");");
hiWindow.document.writeln("            await writable.write(\"#     |====1) My great task\\n\");");
hiWindow.document.writeln("            await writable.write(\"#     |12\\n\");");
hiWindow.document.writeln("            await writable.write(\"#     |-2\\n\");");
hiWindow.document.writeln("            await writable.write(\"#     |+6\\n\");");
hiWindow.document.writeln("            await writable.write(\"# So current hours for Task 1 is 12h, it will be decreased by 2h and increased by 6h.\\n\");");
hiWindow.document.writeln("            await writable.write(\"# Current hours are not required, can be deleted from this file.\\n\");");
hiWindow.document.writeln("            await writable.write(\"#------------------------------------------------------------------------------------\\n\");");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("            for (let i = 0; i < fondTasks.length; i++) {");
hiWindow.document.writeln("                let foundTask = fondTasks[i].value;");
hiWindow.document.writeln("                await writable.write(\"====\" + foundTask + \"\\n\");");
hiWindow.document.writeln("                await writable.write(200 + \"\\n\");");
hiWindow.document.writeln("                let sumHours = taskSumHours.get(foundTask);");
hiWindow.document.writeln("                await writable.write(\"+\" + sumHours + \" #SUM\\n\");");
hiWindow.document.writeln("                //console.log(\"sum=\" + sumHours + \"\\n\");");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("            await writable.close();");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        // writting a file");
hiWindow.document.writeln("        async function parseWriteFile() {");
hiWindow.document.writeln("            await writeFile();");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        parseWriteFile()");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function readTxtFile() {");
hiWindow.document.writeln("        task = document.querySelector('#foundTasks').value;");
hiWindow.document.writeln("        hours = document.querySelector('#hoursAmount').value;");
hiWindow.document.writeln("        status.textContent = \"Parsing given txt file.\";");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        //reading file");
hiWindow.document.writeln("        async function getFileHandle() {");
hiWindow.document.writeln("            const options = {");
hiWindow.document.writeln("                types: [");
hiWindow.document.writeln("                    {");
hiWindow.document.writeln("                        description: 'Text Files',");
hiWindow.document.writeln("                        accept: {");
hiWindow.document.writeln("                            'text/plain': ['.txt'],");
hiWindow.document.writeln("                        },");
hiWindow.document.writeln("                    },");
hiWindow.document.writeln("                ],");
hiWindow.document.writeln("            };");
hiWindow.document.writeln("            const [fileHandle] = await window.showOpenFilePicker(options);");
hiWindow.document.writeln("            return fileHandle;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        async function readFile() {");
hiWindow.document.writeln("            const fileHandle = await getFileHandle();");
hiWindow.document.writeln("            const file = await fileHandle.getFile();");
hiWindow.document.writeln("            const content = await file.text();");
hiWindow.document.writeln("            return content;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        // parsing read txt file");
hiWindow.document.writeln("        async function parseReadTxt() {");
hiWindow.document.writeln("            const content = await readFile();");
hiWindow.document.writeln("            // //console.log(content);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("            let lines = content.replaceAll(\"\\r\", \"\").split(\"\\n\")");
hiWindow.document.writeln("            let currentTask;");
hiWindow.document.writeln("            let hours;");
hiWindow.document.writeln("            let increase = false;");
hiWindow.document.writeln("            let decrease = false;");
hiWindow.document.writeln("            for (let i = 0; i < lines.length; i++) {");
hiWindow.document.writeln("                let line = lines[i];");
hiWindow.document.writeln("                //console.log(\"LINE|\" + line);");
hiWindow.document.writeln("                if (line.length === 0 || line === null) {");
hiWindow.document.writeln("                    continue;");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("                let firstLetter = line[0];");
hiWindow.document.writeln("                if (firstLetter === \"#\") {");
hiWindow.document.writeln("                    continue;");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("                if (firstLetter === \"=\") {");
hiWindow.document.writeln("                    increase = false;");
hiWindow.document.writeln("                    decrease = false;");
hiWindow.document.writeln("                    hours = parseFloat(\"0\");");
hiWindow.document.writeln("                    currentTask = line.split(\"====\")[1];");
hiWindow.document.writeln("                    //console.log(\"\\t-->TASK|\" + currentTask);");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("                if (firstLetter === \"+\") {");
hiWindow.document.writeln("                    increase = true;");
hiWindow.document.writeln("                    if (parseFloat(\"0,1\") === 0) {");
hiWindow.document.writeln("                        hours = parseFloat(line.replaceAll(\",\", \".\").split(\"+\")[1]);");
hiWindow.document.writeln("                    } else {");
hiWindow.document.writeln("                        hours = parseFloat(line.replaceAll(\".\", \",\").split(\"+\")[1]);");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    if (hours === null || hours === parseFloat(\"0\")) {");
hiWindow.document.writeln("                        continue;");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    //console.log(\"\\thours=\" + hours);");
hiWindow.document.writeln("                    let foundTaskMenu = document.querySelector('#foundTasks');");
hiWindow.document.writeln("                    let foundTaskElements = foundTaskMenu.children;");
hiWindow.document.writeln("                    for (let i = 0; i < foundTaskElements.length; i++) {");
hiWindow.document.writeln("                        let foundTask = foundTaskElements[i].value;");
hiWindow.document.writeln("                        if (currentTask === foundTask) {");
hiWindow.document.writeln("                            document.querySelector('#foundTasks').value = foundTask;");
hiWindow.document.writeln("                            document.querySelector('#hoursAmount').value = hours;");
hiWindow.document.writeln("                            document.querySelector('#insertButton').onclick();");
hiWindow.document.writeln("                            //console.log(\"\\t--> +  |\" + hours);");
hiWindow.document.writeln("                            break;");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("                if (firstLetter === \"-\") {");
hiWindow.document.writeln("                    increase = true;");
hiWindow.document.writeln("                    if (parseFloat(\"0,1\") === 0) {");
hiWindow.document.writeln("                        hours = parseFloat(line.replaceAll(\",\", \".\").split(\"-\")[1]);");
hiWindow.document.writeln("                    } else {");
hiWindow.document.writeln("                        hours = parseFloat(line.replaceAll(\".\", \",\").split(\"-\")[1]);");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    if (hours === null || hours === parseFloat(\"0\")) {");
hiWindow.document.writeln("                        continue;");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    //console.log(\"\\thours=\" + hours);");
hiWindow.document.writeln("                    let foundTaskMenu = document.querySelector('#foundTasks');");
hiWindow.document.writeln("                    let foundTaskElements = foundTaskMenu.children;");
hiWindow.document.writeln("                    for (let i = 0; i < foundTaskElements.length; i++) {");
hiWindow.document.writeln("                        let foundTask = foundTaskElements[i].value;");
hiWindow.document.writeln("                        if (currentTask === foundTask) {");
hiWindow.document.writeln("                            document.querySelector('#foundTasks').value = foundTask;");
hiWindow.document.writeln("                            document.querySelector('#hoursAmount').value = hours;");
hiWindow.document.writeln("                            document.querySelector('#removeButton').onclick();");
hiWindow.document.writeln("                            //console.log(\"\\t--> -  |\" + hours);");
hiWindow.document.writeln("                            break;");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        parseReadTxt();");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function convertJiraReport() {");
hiWindow.document.writeln("        console.log(\"Convert xml\")");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        //reading file");
hiWindow.document.writeln("        async function getFileHandle() {");
hiWindow.document.writeln("            const options = {");
hiWindow.document.writeln("                types: [");
hiWindow.document.writeln("                    {");
hiWindow.document.writeln("                        description: 'Excel files',");
hiWindow.document.writeln("                        accept: {");
hiWindow.document.writeln("                            'application/vnd.ms-excel': ['.xls']");
hiWindow.document.writeln("                        },");
hiWindow.document.writeln("                    },");
hiWindow.document.writeln("                ],");
hiWindow.document.writeln("            };");
hiWindow.document.writeln("            const [fileHandle] = await window.showOpenFilePicker(options);");
hiWindow.document.writeln("            return fileHandle;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        async function readFile() {");
hiWindow.document.writeln("            let content = \"\";");
hiWindow.document.writeln("            const fileHandle = await getFileHandle();");
hiWindow.document.writeln("            const permissionGranted = await fileHandle.requestPermission();");
hiWindow.document.writeln("            if (!permissionGranted) {");
hiWindow.document.writeln("                console.error('Permission to access file was denied');");
hiWindow.document.writeln("                return;");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("            const file = await fileHandle.getFile();");
hiWindow.document.writeln("            //const content = await file.text();");
hiWindow.document.writeln("            const fileReader = new FileReader();");
hiWindow.document.writeln("            fileReader.addEventListener('load', (event) => {");
hiWindow.document.writeln("                    const binaryString = event.target.result;");
hiWindow.document.writeln("                    // Use a library like SheetJS or XLSX to parse the binary string");
hiWindow.document.writeln("                    //console.log(binaryString);");
hiWindow.document.writeln("                    const workbook = XLSX.read(binaryString, {type: 'binary'});");
hiWindow.document.writeln("                    // read first sheet only");
hiWindow.document.writeln("                    const sheetName = workbook.SheetNames[0];");
hiWindow.document.writeln("                    const sheet = workbook.Sheets[sheetName];");
hiWindow.document.writeln("                    // convert xls sheet to JSON");
hiWindow.document.writeln("                    let sheetContent = XLSX.utils.sheet_to_json(sheet);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // parseSheetContent(sheetContent);");
hiWindow.document.writeln("                    if (sheetContent === \"\" || sheetContent === null || sheetContent.length <= 1) {");
hiWindow.document.writeln("                        console.log(\"There is no content for sheet :-(\");");
hiWindow.document.writeln("                        return;");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    console.log(sheetContent);");
hiWindow.document.writeln("                    let jiraTaskHours = new Map();");
hiWindow.document.writeln("                    let resultOfParsing = \"\";");
hiWindow.document.writeln("                    for (let i = 0; i < sheetContent.length; i++) {");
hiWindow.document.writeln("                        let row = sheetContent[i];");
hiWindow.document.writeln("                        console.log(\"row \" + i + \"->\" + row);");
hiWindow.document.writeln("                        let taskName = \"\";");
hiWindow.document.writeln("                        let taskHours = parseFloat(0);");
hiWindow.document.writeln("                        for (var key in row) {");
hiWindow.document.writeln("                            var value = row[key];");
hiWindow.document.writeln("                            // console.log(\"key=\" + key + \", value=\" + value);");
hiWindow.document.writeln("                            if (key.search((\"PPM Project\")) === 0) {");
hiWindow.document.writeln("                                taskName = value;");
hiWindow.document.writeln("                            } else if (key.search((\"Total PPM Project\")) === 0) {");
hiWindow.document.writeln("                                taskHours = parseFloat(value);");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        if (taskName === \"Total\") {");
hiWindow.document.writeln("                            continue;");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        if (taskName.match(\" - \") === -1) {");
hiWindow.document.writeln("                            continue;");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                        taskName = taskName.replaceAll(\"\\t\", \"\").split(\" - \").slice(-1);   //<<<<<<<< update here");
hiWindow.document.writeln("                        console.log(\"task=\" + taskName);");
hiWindow.document.writeln("                        console.log(\"hours=\" + taskHours);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                        jiraTaskHours.set(taskName, taskHours);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                        // resultOfParsing");
hiWindow.document.writeln("                        document.querySelector('#filterTasks').value = taskName;");
hiWindow.document.writeln("                        document.querySelector('#hoursAmount').value = taskHours;");
hiWindow.document.writeln("                        document.querySelector('#filterTasks').onkeyup();");
hiWindow.document.writeln("                        document.querySelector('#foundTasks');");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                        let foundTasksAmount = document.querySelector('#foundTasks').childElementCount;");
hiWindow.document.writeln("                        if (foundTasksAmount > 0) {");
hiWindow.document.writeln("                            for (let k = 0; k < foundTasksAmount; k++) {");
hiWindow.document.writeln("                                resultOfParsing = resultOfParsing + \"====\" + document.querySelector('#foundTasks').children[k].value + \"\\n\";");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                            resultOfParsing = resultOfParsing + taskHours + \"\\n\"");
hiWindow.document.writeln("                        } else {");
hiWindow.document.writeln("                            resultOfParsing = resultOfParsing + \"#task not found: \" + taskName + \" -> \" + taskHours + \"\\n\";");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    document.querySelector('#filterTasks').value = \"\";");
hiWindow.document.writeln("                    document.querySelector('#hoursAmount').value = parseFloat(40);");
hiWindow.document.writeln("                    document.querySelector('#filterTasks').onkeyup();");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    if (jiraTaskHours.size === 0) {");
hiWindow.document.writeln("                        return;");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    console.log(\"resultOfParsing=\");");
hiWindow.document.writeln("                    console.log(resultOfParsing);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // // DUMMY TEST - set filter task -> get list of filtered tasks");
hiWindow.document.writeln("                    // let taskName = \"small feat\";");
hiWindow.document.writeln("                    // let taskHours = parseFloat(40);");
hiWindow.document.writeln("                    // let tasksFound = \"\";");
hiWindow.document.writeln("                    //");
hiWindow.document.writeln("                    // document.querySelector('#filterTasks').value = taskName;");
hiWindow.document.writeln("                    // document.querySelector('#hoursAmount').value = taskHours;");
hiWindow.document.writeln("                    // document.querySelector('#filterTasks').onkeyup();");
hiWindow.document.writeln("                    // document.querySelector('#foundTasks');");
hiWindow.document.writeln("                    //");
hiWindow.document.writeln("                    // let foundTasksAmount = document.querySelector('#foundTasks').childElementCount;");
hiWindow.document.writeln("                    // for (let i = 0; i < foundTasksAmount; i++) {");
hiWindow.document.writeln("                    //     tasksFound = tasksFound + \"====\" + document.querySelector('#foundTasks').children[i].value + \"\\n\";");
hiWindow.document.writeln("                    // }");
hiWindow.document.writeln("                    // console.log(\"Shall write to a file:\");");
hiWindow.document.writeln("                    // console.log(tasksFound);");
hiWindow.document.writeln("                    // console.log(taskHours);");
hiWindow.document.writeln("                    // // DUMMY TEST - set filter task -> get list of filtered tasks");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // open file in order to write a file & what to write");
hiWindow.document.writeln("                    async function writeFile() {");
hiWindow.document.writeln("                        const options = {");
hiWindow.document.writeln("                            // suggestedName: 'ppm_hours_',");
hiWindow.document.writeln("                            types: [");
hiWindow.document.writeln("                                {");
hiWindow.document.writeln("                                    description: 'Text Files',");
hiWindow.document.writeln("                                    accept: {");
hiWindow.document.writeln("                                        'text/plain': ['.txt'],");
hiWindow.document.writeln("                                    },");
hiWindow.document.writeln("                                },");
hiWindow.document.writeln("                            ],");
hiWindow.document.writeln("                        };");
hiWindow.document.writeln("                        const fileHandle = await window.showSaveFilePicker(options);");
hiWindow.document.writeln("                        const writable = await fileHandle.createWritable();");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                        var creationDate = new Date();");
hiWindow.document.writeln("                        var creationDateFormatted = +creationDate.getFullYear() + \"-\" + (creationDate.getMonth() + 1) + \"-\" + creationDate.getDate()");
hiWindow.document.writeln("                            + \"_\" + creationDate.getHours() + \"-\" + creationDate.getMinutes() + \"-\" + creationDate.getSeconds();");
hiWindow.document.writeln("                        await writable.write(\"# Created in \" + creationDateFormatted + \".\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# Converted from Jira report file\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#------------------------------------------------------------------------------------\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#<-- use this for comments.\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# Content:\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# List of task names, below each current total hours.\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# In order to increase or decrease hours, write +XXX or -XXX, for example:\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#     |====1) My great task\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#     |12\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#     |-2\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#     |+6\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# So current hours for Task 1 is 12h, it will be decreased by 2h and increased by 6h.\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# Current hours are not required, can be deleted from this file.\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#------------------------------------------------------------------------------------\\n\");");
hiWindow.document.writeln("                        await writable.write(resultOfParsing);");
hiWindow.document.writeln("                        await writable.close();");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // writting a file");
hiWindow.document.writeln("                    async function parseWriteFile() {");
hiWindow.document.writeln("                        await writeFile();");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    parseWriteFile()");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("            )");
hiWindow.document.writeln("            fileReader.readAsBinaryString(file);");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        async function runReadingXmlFile() {");
hiWindow.document.writeln("            console.log(\"reading file\");");
hiWindow.document.writeln("            await readFile();");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        runReadingXmlFile();");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("    function convertJiraReportDetailed() {");
hiWindow.document.writeln("        console.log(\"Convert xml 2 - detailed way\")");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        //reading file");
hiWindow.document.writeln("        async function getFileHandle() {");
hiWindow.document.writeln("            const options = {");
hiWindow.document.writeln("                types: [");
hiWindow.document.writeln("                    {");
hiWindow.document.writeln("                        description: 'Excel files',");
hiWindow.document.writeln("                        accept: {");
hiWindow.document.writeln("                            'application/vnd.ms-excel': ['.xls']");
hiWindow.document.writeln("                        },");
hiWindow.document.writeln("                    },");
hiWindow.document.writeln("                ],");
hiWindow.document.writeln("            };");
hiWindow.document.writeln("            const [fileHandle] = await window.showOpenFilePicker(options);");
hiWindow.document.writeln("            return fileHandle;");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        async function readFile() {");
hiWindow.document.writeln("            let content = \"\";");
hiWindow.document.writeln("            const fileHandle = await getFileHandle();");
hiWindow.document.writeln("            const permissionGranted = await fileHandle.requestPermission();");
hiWindow.document.writeln("            if (!permissionGranted) {");
hiWindow.document.writeln("                console.error('Permission to access file was denied');");
hiWindow.document.writeln("                return;");
hiWindow.document.writeln("            }");
hiWindow.document.writeln("            const file = await fileHandle.getFile();");
hiWindow.document.writeln("            //const content = await file.text();");
hiWindow.document.writeln("            const fileReader = new FileReader();");
hiWindow.document.writeln("            fileReader.addEventListener('load', (event) => {");
hiWindow.document.writeln("                    const commentOffset = 6;");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    function updateHoursInMainOrInSubtask(currentDescriptionInDetails, idMain, resultsFound, foundTasksForCurrent) {");
hiWindow.document.writeln("                        const commentOffset = 6;");
hiWindow.document.writeln("                        // check if it is subtask or not -> add");
hiWindow.document.writeln("                        //\"<Bug Fixing and Rework> dfanalysis is <asdf asdf >\".split(/(<[a-zA-Z 0-9]*>)/)");
hiWindow.document.writeln("                        //\"nothing important\".split(/(<[a-zA-Z 0-9]*>)/)");
hiWindow.document.writeln("                        console.log(\"==== parsing description\");");
hiWindow.document.writeln("                        console.log(currentDescriptionInDetails);");
hiWindow.document.writeln("                        let descriptionSplited = currentDescriptionInDetails.split(/(<[a-zA-Z 0-9:-_,]*>)/);");
hiWindow.document.writeln("                        let length = descriptionSplited.length;");
hiWindow.document.writeln("                        let isSubtask = false;");
hiWindow.document.writeln("                        if (length > 1 && resultsFound.task[idMain].sub.length > 0) {");
hiWindow.document.writeln("                            let descriptionSubtask = descriptionSplited[1];");
hiWindow.document.writeln("                            descriptionSubtask = descriptionSubtask.replaceAll(\">\", \"\").replaceAll(\"<\", \"\");");
hiWindow.document.writeln("                            // isSubtask = foundTasksForCurrent.includes(descriptionSubtask);");
hiWindow.document.writeln("                            isSubtask = foundTasksForCurrent.some(tasks => tasks.includes(descriptionSubtask));");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        if (isSubtask) {");
hiWindow.document.writeln("                            for (let i in resultsFound.task[idMain].sub) {");
hiWindow.document.writeln("                                let subtask = resultsFound.task[idMain].sub[i];");
hiWindow.document.writeln("                                let descriptionSubtask = descriptionSplited[1];");
hiWindow.document.writeln("                                descriptionSubtask = descriptionSubtask.replaceAll(\">\", \"\").replaceAll(\"<\", \"\");");
hiWindow.document.writeln("                                if (subtask.name.includes(descriptionSubtask)) {");
hiWindow.document.writeln("                                    console.log(\"=-=-=\");");
hiWindow.document.writeln("                                    console.log(\"   added to subtask: \" + subtask.name);");
hiWindow.document.writeln("                                    let timeSize = (currentTimeReportedInDetails + \"\").length;");
hiWindow.document.writeln("                                    let offset = commentOffset - timeSize > 0 ? commentOffset - timeSize : 1;");
hiWindow.document.writeln("                                    subtask.hours.push(");
hiWindow.document.writeln("                                        \"+\"");
hiWindow.document.writeln("                                        + currentTimeReportedInDetails");
hiWindow.document.writeln("                                        + \" \".repeat(offset)");
hiWindow.document.writeln("                                        + \"# \" + currentIssueInDetails");
hiWindow.document.writeln("                                        + \" : \"");
hiWindow.document.writeln("                                        + currentDescriptionInDetails");
hiWindow.document.writeln("                                            .replaceAll(descriptionSplited[1], \"\")");
hiWindow.document.writeln("                                            .replaceAll(\"\\n\", \"\")");
hiWindow.document.writeln("                                            .replaceAll(\"\\t\", \"\"));");
hiWindow.document.writeln("                                    break;");
hiWindow.document.writeln("                                }");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                        } else {");
hiWindow.document.writeln("                            let timeSize = (currentTimeReportedInDetails + \"\").length;");
hiWindow.document.writeln("                            let offset = commentOffset + 1 - timeSize > 0 ? commentOffset + 1 - timeSize : 1;");
hiWindow.document.writeln("                            let content = currentTimeReportedInDetails");
hiWindow.document.writeln("                                + \" \".repeat(offset)");
hiWindow.document.writeln("                                + \"# \" + currentIssueInDetails");
hiWindow.document.writeln("                                + \" : \" + currentDescriptionInDetails.replaceAll(\"\\n\", \"\").replaceAll(\"\\t\", \"\");");
hiWindow.document.writeln("                            console.log(\"no subtask found -> \" + content);");
hiWindow.document.writeln("                            resultsFound.task[idMain].main.hours.push(content);");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    const binaryString = event.target.result;");
hiWindow.document.writeln("                    // Use a library like SheetJS or XLSX to parse the binary string");
hiWindow.document.writeln("                    //console.log(binaryString);");
hiWindow.document.writeln("                    const workbook = XLSX.read(binaryString, {type: 'binary'});");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // (1) read first sheet - parse Jira task and PPM task");
hiWindow.document.writeln("                    let sheetName = workbook.SheetNames[0];");
hiWindow.document.writeln("                    let sheet = workbook.Sheets[sheetName];");
hiWindow.document.writeln("                    // convert xls sheet to JSON");
hiWindow.document.writeln("                    let sheetContent = XLSX.utils.sheet_to_json(sheet);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // parseSheetContent(sheetContent);");
hiWindow.document.writeln("                    if (sheetContent === \"\" || sheetContent === null || sheetContent.length <= 1) {");
hiWindow.document.writeln("                        console.log(\"There is no content for sheet :-(\");");
hiWindow.document.writeln("                        return;");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    console.log(sheetContent);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // mapping Jira to ppm task");
hiWindow.document.writeln("                    const jiraTaskPPMTask = new Map();");
hiWindow.document.writeln("                    let currentIssue = \"\";");
hiWindow.document.writeln("                    let currentPPMProject = \"\";");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    //fix typos - read map");
hiWindow.document.writeln("                    let containerDiv = window.opener.document.getElementById('jiraNamePPMTaskName');");
hiWindow.document.writeln("                    let ppmFullNameVSexpectedJiraFullName = new Map();");
hiWindow.document.writeln("                    Array.from(containerDiv.children).forEach(childDiv => {");
hiWindow.document.writeln("                        let content = childDiv.textContent;");
hiWindow.document.writeln("                        let [keyPart, valuePart] = content.split(', ');");
hiWindow.document.writeln("                        let key = keyPart.replace('Key: ', '').trim();");
hiWindow.document.writeln("                        let value = valuePart.replace('Value: ', '').trim();");
hiWindow.document.writeln("                        ppmFullNameVSexpectedJiraFullName.set(key, value);");
hiWindow.document.writeln("                    });");
hiWindow.document.writeln("                    console.log(\">>> ppmFullNameVSexpectedJiraFullName.keys()\" + ppmFullNameVSexpectedJiraFullName.keys())");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    for (let i = 0; i < sheetContent.length; i++) {");
hiWindow.document.writeln("                        let elementOnSheet = sheetContent[i];");
hiWindow.document.writeln("                        console.log(\"Element \" + i + \" = \" + elementOnSheet)");
hiWindow.document.writeln("                        for (let key in elementOnSheet) {");
hiWindow.document.writeln("                            let value = elementOnSheet[key];");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                            //fix typos -> convert jira full name (value) to ppm full name if exists");
hiWindow.document.writeln("                            if (ppmFullNameVSexpectedJiraFullName.get(value) !== undefined) {");
hiWindow.document.writeln("                                value = ppmFullNameVSexpectedJiraFullName.get(value);");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                            console.log(\"---> key=\" + key + \", value=\" + value);");
hiWindow.document.writeln("                            if (key.search(\"Issue\") === 0) {");
hiWindow.document.writeln("                                currentIssue = value;");
hiWindow.document.writeln("                                if (currentPPMProject !== \"\") {");
hiWindow.document.writeln("                                    jiraTaskPPMTask.set(currentIssue, currentPPMProject);");
hiWindow.document.writeln("                                }");
hiWindow.document.writeln("                            } else if (key.search(\"PPM Project 20\") === 0) {");
hiWindow.document.writeln("                                let ppmName = value.replaceAll(\"\t\", \"\").split(\" - \").slice(-1)[0];");
hiWindow.document.writeln("                                currentPPMProject = ppmName;");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    console.log(\"(1) done: jiraTaskPPMTask = \");");
hiWindow.document.writeln("                    console.log(jiraTaskPPMTask);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // (2) read second sheet - parse Jira tasks hours to proper PPM task and save");
hiWindow.document.writeln("                    console.log(\"===============\")");
hiWindow.document.writeln("                    console.log(\"=== part 2 ====\")");
hiWindow.document.writeln("                    console.log(\"===============\")");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // (2.0) get list of all tasks");
hiWindow.document.writeln("                    document.querySelector('#filterTasks').value = \"\";");
hiWindow.document.writeln("                    document.querySelector('#filterTasks').onkeyup();");
hiWindow.document.writeln("                    document.querySelector('#foundTasks');");
hiWindow.document.writeln("                    let foundTasksAmount = document.querySelector('#foundTasks').childElementCount;");
hiWindow.document.writeln("                    const foundTasks = [];");
hiWindow.document.writeln("                    for (let k = 0; k < foundTasksAmount; k++) {");
hiWindow.document.writeln("                        foundTasks.push(document.querySelector('#foundTasks').children[k].value);");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    console.log(\"My all found tasks are:\");");
hiWindow.document.writeln("                    console.log(foundTasks);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // (2.1) read data from sheet 2");
hiWindow.document.writeln("                    sheetName = workbook.SheetNames[1];");
hiWindow.document.writeln("                    sheet = workbook.Sheets[sheetName];");
hiWindow.document.writeln("                    sheetContent = XLSX.utils.sheet_to_json(sheet);");
hiWindow.document.writeln("                    // parseSheetContent(sheetContent);");
hiWindow.document.writeln("                    if (sheetContent === \"\" || sheetContent === null || sheetContent.length <= 1) {");
hiWindow.document.writeln("                        console.log(\"There is no content for sheet :-(\");");
hiWindow.document.writeln("                        return;");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    console.log(sheetContent);");
hiWindow.document.writeln("                    let currentIssueInDetails = \"\";");
hiWindow.document.writeln("                    let currentTimeReportedInDetails = \"\";");
hiWindow.document.writeln("                    let currentDescriptionInDetails = \"\";");
hiWindow.document.writeln("                    let currentPPMMainTaskInDetails = \"\";");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    const resultsFound = {\"task\": []};");
hiWindow.document.writeln("                    const resultsNotFound = {\"task\": []};");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    for (let i = 0; i < sheetContent.length; i++) {");
hiWindow.document.writeln("                        let elementOnSheet = sheetContent[i];");
hiWindow.document.writeln("                        console.log(\"Element \" + i + \" = \" + elementOnSheet);");
hiWindow.document.writeln("                        for (let key in elementOnSheet) {");
hiWindow.document.writeln("                            let value = elementOnSheet[key];");
hiWindow.document.writeln("                            if (key.search(\"Issue\") === 0) {");
hiWindow.document.writeln("                                currentIssueInDetails = value;");
hiWindow.document.writeln("                            } else if (key.search(\"Time reported\") === 0) {");
hiWindow.document.writeln("                                currentTimeReportedInDetails = parseFloat(value);");
hiWindow.document.writeln("                            } else if (key.search(\"Description\") === 0) {");
hiWindow.document.writeln("                                currentDescriptionInDetails = value;");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        currentPPMMainTaskInDetails = jiraTaskPPMTask.get(currentIssueInDetails);");
hiWindow.document.writeln("                        console.log(\"Found: \" + currentIssueInDetails + \" \" + currentTimeReportedInDetails + \"h |\"");
hiWindow.document.writeln("                            + currentDescriptionInDetails + \"|\" + \" ppm = \" + currentPPMMainTaskInDetails);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                        let isCurrentPPMMainTaskInFoundTasks = false;");
hiWindow.document.writeln("                        let foundTasksForCurrent = [];");
hiWindow.document.writeln("                        for (let id in foundTasks) {");
hiWindow.document.writeln("                            let foundTask = foundTasks[id];");
hiWindow.document.writeln("                            if (foundTask.includes(currentPPMMainTaskInDetails)) {");
hiWindow.document.writeln("                                isCurrentPPMMainTaskInFoundTasks = true;");
hiWindow.document.writeln("                                foundTasksForCurrent.push(foundTask);");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        //resultsFound  |  resultsNotFound  |  foundTasks  |  currentPPMProject");
hiWindow.document.writeln("                        //  aaa.some(e => /.*lic.*/.test(e))");
hiWindow.document.writeln("                        if (isCurrentPPMMainTaskInFoundTasks) {");
hiWindow.document.writeln("                            console.log(\"-->  OK: it was found in foundTask\");");
hiWindow.document.writeln("                            let hasResultsTask = false;");
hiWindow.document.writeln("                            for (let i in resultsFound.task) {");
hiWindow.document.writeln("                                if (resultsFound.task[i].main.name === currentPPMMainTaskInDetails) {");
hiWindow.document.writeln("                                    hasResultsTask = true;");
hiWindow.document.writeln("                                    break;");
hiWindow.document.writeln("                                }");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                            if (!hasResultsTask) {");
hiWindow.document.writeln("                                console.log(\"-->  create new foundTask for \" + currentPPMMainTaskInDetails);");
hiWindow.document.writeln("                                resultsFound.task.push({");
hiWindow.document.writeln("                                    \"main\": {");
hiWindow.document.writeln("                                        \"name\": currentPPMMainTaskInDetails,");
hiWindow.document.writeln("                                        \"hours\": []");
hiWindow.document.writeln("                                    },");
hiWindow.document.writeln("                                    \"sub\": []");
hiWindow.document.writeln("                                });");
hiWindow.document.writeln("                                let idMain = resultsFound.task.length - 1;");
hiWindow.document.writeln("                                console.log(resultsFound);");
hiWindow.document.writeln("                                console.log(idMain);");
hiWindow.document.writeln("                                for (let idTask in foundTasksForCurrent) {");
hiWindow.document.writeln("                                    let subTask = foundTasksForCurrent[idTask];");
hiWindow.document.writeln("                                    console.log(\"--- add subtask: \" + subTask);");
hiWindow.document.writeln("                                    resultsFound.task[idMain].sub.push(");
hiWindow.document.writeln("                                        {");
hiWindow.document.writeln("                                            \"name\": subTask,");
hiWindow.document.writeln("                                            \"hours\": []");
hiWindow.document.writeln("                                        }");
hiWindow.document.writeln("                                    );");
hiWindow.document.writeln("                                }");
hiWindow.document.writeln("                                updateHoursInMainOrInSubtask(currentDescriptionInDetails, idMain, resultsFound, foundTasksForCurrent);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                            } else {");
hiWindow.document.writeln("                                //hasResultsTask");
hiWindow.document.writeln("                                console.log(\"-->  update foundTask for \" + currentPPMMainTaskInDetails);");
hiWindow.document.writeln("                                //find task id in resultsFound");
hiWindow.document.writeln("                                let idMain = null;");
hiWindow.document.writeln("                                for (let i in resultsFound.task) {");
hiWindow.document.writeln("                                    console.log(resultsFound.task[i].main.name);");
hiWindow.document.writeln("                                    if (resultsFound.task[i].main.name === currentPPMMainTaskInDetails) {");
hiWindow.document.writeln("                                        idMain = i;");
hiWindow.document.writeln("                                        break");
hiWindow.document.writeln("                                    }");
hiWindow.document.writeln("                                }");
hiWindow.document.writeln("                                if (idMain == null) {");
hiWindow.document.writeln("                                    console.log(\"ERROR - task not found in resultsFound.\");");
hiWindow.document.writeln("                                    continue;");
hiWindow.document.writeln("                                }");
hiWindow.document.writeln("                                updateHoursInMainOrInSubtask(currentDescriptionInDetails, idMain, resultsFound, foundTasksForCurrent);");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                            console.log(resultsFound);");
hiWindow.document.writeln(" ");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                        } else {");
hiWindow.document.writeln("                            console.log(\"--> BAD: it was not found in foundTask\");");
hiWindow.document.writeln("                            //const resultsNotFound = {\"task\": []};");
hiWindow.document.writeln("                            let hasResultsTask = false;");
hiWindow.document.writeln("                            for (let i in resultsNotFound.task) {");
hiWindow.document.writeln("                                if (resultsNotFound.task[i].name === currentPPMMainTaskInDetails) {");
hiWindow.document.writeln("                                    hasResultsTask = true;");
hiWindow.document.writeln("                                    break;");
hiWindow.document.writeln("                                }");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                            if (!hasResultsTask) {");
hiWindow.document.writeln("                                console.log(\"-->  create new notFoundTask for \" + currentPPMMainTaskInDetails);");
hiWindow.document.writeln("                                resultsNotFound.task.push({");
hiWindow.document.writeln("                                    \"name\": currentPPMMainTaskInDetails,");
hiWindow.document.writeln("                                    \"hours\": []");
hiWindow.document.writeln("                                });");
hiWindow.document.writeln("                                let idTask = resultsNotFound.task.length - 1;");
hiWindow.document.writeln("                                let timeSize = (currentTimeReportedInDetails + \"\").length;");
hiWindow.document.writeln("                                let offset = commentOffset + 1 - timeSize > 0 ? commentOffset + 1 - timeSize : 1;");
hiWindow.document.writeln("                                let content = currentTimeReportedInDetails");
hiWindow.document.writeln("                                    + \" \".repeat(offset)");
hiWindow.document.writeln("                                    + \" # \" + currentIssueInDetails");
hiWindow.document.writeln("                                    + \" : \" + currentDescriptionInDetails.replaceAll(\"\\n\", \"\").replaceAll(\"\\t\", \"\");");
hiWindow.document.writeln("                                resultsNotFound.task[idTask].hours.push(content);");
hiWindow.document.writeln("                                console.log(\"  added to resultsNotFound:\");");
hiWindow.document.writeln("                                console.log(resultsNotFound);");
hiWindow.document.writeln("                            } else {");
hiWindow.document.writeln("                                //hasResultsTask");
hiWindow.document.writeln("                                console.log(\"-->  update notFoundTask for \" + currentPPMMainTaskInDetails);");
hiWindow.document.writeln("                                //find task id in resultsFound");
hiWindow.document.writeln("                                let idTask = null;");
hiWindow.document.writeln("                                for (let i in resultsNotFound.task) {");
hiWindow.document.writeln("                                    console.log(resultsNotFound.task[i].name);");
hiWindow.document.writeln("                                    if (resultsNotFound.task[i].name === currentPPMMainTaskInDetails) {");
hiWindow.document.writeln("                                        idTask = i;");
hiWindow.document.writeln("                                        break");
hiWindow.document.writeln("                                    }");
hiWindow.document.writeln("                                }");
hiWindow.document.writeln("                                if (idTask == null) {");
hiWindow.document.writeln("                                    console.log(\"ERROR - task not found in resultsFound.\");");
hiWindow.document.writeln("                                    continue;");
hiWindow.document.writeln("                                }");
hiWindow.document.writeln("                                let timeSize = (currentTimeReportedInDetails + \"\").length;");
hiWindow.document.writeln("                                let offset = commentOffset + 1 - timeSize > 0 ? commentOffset + 1 - timeSize : 1;");
hiWindow.document.writeln("                                let content = currentTimeReportedInDetails");
hiWindow.document.writeln("                                    + \" \".repeat(offset)");
hiWindow.document.writeln("                                    + \"# \" + currentIssueInDetails");
hiWindow.document.writeln("                                    + \" : \" + currentDescriptionInDetails.replaceAll(\"\\n\", \"\").replaceAll(\"\\t\", \"\");");
hiWindow.document.writeln("                                resultsNotFound.task[idTask].hours.push(content);");
hiWindow.document.writeln("                                console.log(\"  added to resultsNotFound:\");");
hiWindow.document.writeln("                                console.log(resultsNotFound);");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    console.log(resultsFound);");
hiWindow.document.writeln("                    console.log(resultsNotFound);");
hiWindow.document.writeln("                    let resultOfParsing = \"\";");
hiWindow.document.writeln("                    console.log(\"#-----------------------------------------------------------------------------------\");");
hiWindow.document.writeln("                    console.log(\"################################### resultsFound ###################################\");");
hiWindow.document.writeln("                    resultOfParsing = resultOfParsing + \"################################### resultsFound ###################################\\n\";");
hiWindow.document.writeln("                    for (let i in resultsFound.task) {");
hiWindow.document.writeln("                        for (let j in resultsFound.task[i].sub) {");
hiWindow.document.writeln("                            console.log(\"====\" + resultsFound.task[i].sub[j].name);");
hiWindow.document.writeln("                            resultOfParsing = resultOfParsing + \"====\" + resultsFound.task[i].sub[j].name + \"\\n\";");
hiWindow.document.writeln("                            for (let k in resultsFound.task[i].sub[j].hours) {");
hiWindow.document.writeln("                                console.log(resultsFound.task[i].sub[j].hours[k]);");
hiWindow.document.writeln("                                resultOfParsing = resultOfParsing + resultsFound.task[i].sub[j].hours[k] + \"\\n\";");
hiWindow.document.writeln("                            }");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        console.log(\"#-----------------------------------------------------------------------------------\");");
hiWindow.document.writeln("                        resultOfParsing = resultOfParsing + \"#-----------------------------------------------------------------------------------\\n\";");
hiWindow.document.writeln("                        for (let j in resultsFound.task[i].main.hours) {");
hiWindow.document.writeln("                            console.log(resultsFound.task[i].main.hours[j]);");
hiWindow.document.writeln("                            resultOfParsing = resultOfParsing + resultsFound.task[i].main.hours[j] + \"\\n\";");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        console.log(\"#-----------------------------------------------------------------------------------\");");
hiWindow.document.writeln("                        resultOfParsing = resultOfParsing + \"#-----------------------------------------------------------------------------------\\n\";");
hiWindow.document.writeln("                        console.log(\"\");");
hiWindow.document.writeln("                        console.log(\"\");");
hiWindow.document.writeln("                        resultOfParsing = resultOfParsing + \"\\n\";");
hiWindow.document.writeln("                        resultOfParsing = resultOfParsing + \"\\n\";");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    console.log(\"################################### resultsNotFound ################################\");");
hiWindow.document.writeln("                    resultOfParsing = resultOfParsing + \"################################### resultsNotFound ################################\\n\";");
hiWindow.document.writeln("                    for (let i in resultsNotFound.task) {");
hiWindow.document.writeln("                        console.log(\"#===\" + resultsNotFound.task[i].name);");
hiWindow.document.writeln("                        resultOfParsing = resultOfParsing + \"#===\" + resultsNotFound.task[i].name + \"\\n\";");
hiWindow.document.writeln("                        for (let j in resultsNotFound.task[i].hours) {");
hiWindow.document.writeln("                            console.log(resultsNotFound.task[i].hours[j]);");
hiWindow.document.writeln("                            resultOfParsing = resultOfParsing + resultsNotFound.task[i].hours[j] + \"\\n\";");
hiWindow.document.writeln("                        }");
hiWindow.document.writeln("                        console.log(\"\");");
hiWindow.document.writeln("                        console.log(\"\");");
hiWindow.document.writeln("                        resultOfParsing = resultOfParsing + \"\\n\";");
hiWindow.document.writeln("                        resultOfParsing = resultOfParsing + \"\\n\";");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln("                    console.log(\"#-----------------------------------------------------------------------------------\");");
hiWindow.document.writeln("                    resultOfParsing = resultOfParsing + \"#-----------------------------------------------------------------------------------\\n\";");
hiWindow.document.writeln("                    // (3) write to a file");
hiWindow.document.writeln("                    console.log(\"===============\");");
hiWindow.document.writeln("                    console.log(\"=== part 3 ====\");");
hiWindow.document.writeln("                    console.log(\"===============\");");
hiWindow.document.writeln("                    //let resultOfParsing = \"\";");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // open file in order to write a file & what to write");
hiWindow.document.writeln("                    async function writeFile() {");
hiWindow.document.writeln("                        const options = {");
hiWindow.document.writeln("                            // suggestedName: 'ppm_hours_',");
hiWindow.document.writeln("                            types: [");
hiWindow.document.writeln("                                {");
hiWindow.document.writeln("                                    description: 'Text Files',");
hiWindow.document.writeln("                                    accept: {");
hiWindow.document.writeln("                                        'text/plain': ['.txt'],");
hiWindow.document.writeln("                                    },");
hiWindow.document.writeln("                                },");
hiWindow.document.writeln("                            ],");
hiWindow.document.writeln("                        };");
hiWindow.document.writeln("                        const fileHandle = await window.showSaveFilePicker(options);");
hiWindow.document.writeln("                        const writable = await fileHandle.createWritable();");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                        var creationDate = new Date();");
hiWindow.document.writeln("                        var creationDateFormatted = +creationDate.getFullYear() + \"-\" + (creationDate.getMonth() + 1) + \"-\" + creationDate.getDate()");
hiWindow.document.writeln("                            + \"_\" + creationDate.getHours() + \"-\" + creationDate.getMinutes() + \"-\" + creationDate.getSeconds();");
hiWindow.document.writeln("                        await writable.write(\"# Created in \" + creationDateFormatted + \".\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# Converted from detailed Jira report file\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#------------------------------------------------------------------------------------\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#<-- use this for comments.\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# Content:\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# List of task names, below each current total hours.\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# In order to increase or decrease hours, write +XXX or -XXX, for example:\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#     |====1) My great task\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#     |12\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#     |-2\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#     |+6\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# So current hours for Task 1 is 12h, it will be decreased by 2h and increased by 6h.\\n\");");
hiWindow.document.writeln("                        await writable.write(\"# Current hours are not required, can be deleted from this file.\\n\");");
hiWindow.document.writeln("                        await writable.write(\"#------------------------------------------------------------------------------------\\n\");");
hiWindow.document.writeln("                        await writable.write(resultOfParsing);");
hiWindow.document.writeln("                        await writable.close();");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    // writting a file");
hiWindow.document.writeln("                    async function parseWriteFile() {");
hiWindow.document.writeln("                        await writeFile();");
hiWindow.document.writeln("                    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("                    parseWriteFile()");
hiWindow.document.writeln("                }");
hiWindow.document.writeln("            )");
hiWindow.document.writeln("            fileReader.readAsBinaryString(file);");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        async function runReadingXmlFile() {");
hiWindow.document.writeln("            console.log(\"reading file\");");
hiWindow.document.writeln("            await readFile();");
hiWindow.document.writeln("        }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("        runReadingXmlFile();");
hiWindow.document.writeln("    }");
hiWindow.document.writeln(" ");
hiWindow.document.writeln("</script>");
hiWindow.document.writeln("</body>");
hiWindow.document.writeln("</html>");
